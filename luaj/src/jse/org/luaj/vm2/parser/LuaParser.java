/* Generated By:JavaCC: Do not edit this line. LuaParser.java */
package org.luaj.vm2.parser;
import org.luaj.vm2.*;
import org.luaj.vm2.ast.*;
import java.util.*;

public class LuaParser implements LuaParserConstants {
  static {
        LuaValue.valueOf(true);
  }

  public static void main(String args[]) throws ParseException {
    LuaParser parser = new LuaParser(System.in);
    parser.Chunk();
  }

  private static Exp.VarExp assertvarexp(Exp.PrimaryExp pe) throws ParseException {
        if (!pe.isvarexp())
                throw new ParseException("expected variable");
        return (Exp.VarExp) pe;
  }

  private static Exp.FuncCall assertfunccall(Exp.PrimaryExp pe) throws ParseException {
        if (!pe.isfunccall())
                throw new ParseException("expected function call");
        return (Exp.FuncCall) pe;
  }

/** Root production. */
  final public Chunk Chunk() throws ParseException {
        Block b;
    b = Block();
    jj_consume_token(0);
                          {if (true) return new Chunk(b);}
    throw new Error("Missing return statement in function");
  }

  final public Block Block() throws ParseException {
        Block b = new Block();
        Stat s;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DO:
      case FOR:
      case FUNCTION:
      case IF:
      case LOCAL:
      case REPEAT:
      case WHILE:
      case NAME:
      case 69:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      s = Stat();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 64:
        jj_consume_token(64);
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
                          b.add(s);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BREAK:
    case RETURN:
      s = LastStat();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 64:
        jj_consume_token(64);
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
                                                              b.add(s);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
                                                                              {if (true) return b;}
    throw new Error("Missing return statement in function");
  }

  final public Stat Stat() throws ParseException {
        Block b,b2;
        Exp e,e2,e3=null;
        Stat s;
        FuncName fn;
        FuncBody fb;
        Token n;
        List<Name> nl;
        List<Exp> el=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DO:
      jj_consume_token(DO);
      b = Block();
      jj_consume_token(END);
                               {if (true) return Stat.block(b);}
      break;
    case WHILE:
      jj_consume_token(WHILE);
      e = Exp();
      jj_consume_token(DO);
      b = Block();
      jj_consume_token(END);
                                               {if (true) return Stat.whiledo(e,b);}
      break;
    case REPEAT:
      jj_consume_token(REPEAT);
      b = Block();
      jj_consume_token(UNTIL);
      e = Exp();
                                             {if (true) return Stat.repeatuntil(b,e);}
      break;
    case IF:
      s = IfThenElse();
                         {if (true) return s;}
      break;
    default:
      jj_la1[6] = jj_gen;
      if (jj_2_1(3)) {
        jj_consume_token(FOR);
        n = jj_consume_token(NAME);
        jj_consume_token(65);
        e = Exp();
        jj_consume_token(66);
        e2 = Exp();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 66:
          jj_consume_token(66);
          e3 = Exp();
          break;
        default:
          jj_la1[4] = jj_gen;
          ;
        }
        jj_consume_token(DO);
        b = Block();
        jj_consume_token(END);
                                                                                                          {if (true) return Stat.fornumeric(n.image,e,e2,e3,b);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FOR:
          jj_consume_token(FOR);
          nl = NameList();
          jj_consume_token(IN);
          el = ExpList();
          jj_consume_token(DO);
          b = Block();
          jj_consume_token(END);
                                                                     {if (true) return Stat.forgeneric(nl,el,b);}
          break;
        case FUNCTION:
          jj_consume_token(FUNCTION);
          fn = FuncName();
          fb = FuncBody();
                                                 {if (true) return Stat.functiondef(fn,fb);}
          break;
        default:
          jj_la1[7] = jj_gen;
          if (jj_2_2(2)) {
            jj_consume_token(LOCAL);
            jj_consume_token(FUNCTION);
            n = jj_consume_token(NAME);
            fb = FuncBody();
                                                                 {if (true) return Stat.localfunctiondef(n.image,fb);}
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LOCAL:
              jj_consume_token(LOCAL);
              nl = NameList();
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case 65:
                jj_consume_token(65);
                el = ExpList();
                break;
              default:
                jj_la1[5] = jj_gen;
                ;
              }
                                                       {if (true) return Stat.localassignment(nl,el);}
              break;
            case NAME:
            case 69:
              s = ExprStat();
                       {if (true) return s;}
              break;
            default:
              jj_la1[8] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Stat IfThenElse() throws ParseException {
        Block b,b2,b3=null;
        Exp e,e2;
        List<Exp> el=null;
        List<Block> bl=null;
    jj_consume_token(IF);
    e = Exp();
    jj_consume_token(THEN);
    b = Block();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSEIF:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_2;
      }
      jj_consume_token(ELSEIF);
      e2 = Exp();
      jj_consume_token(THEN);
      b2 = Block();
                        if (el==null) el=new ArrayList<Exp>();
                        if (bl==null) bl=new ArrayList<Block>();
                        el.add(e2);
                        bl.add(b2);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      b3 = Block();
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    jj_consume_token(END);
                          {if (true) return Stat.ifthenelse(e,b,el,bl,b3);}
    throw new Error("Missing return statement in function");
  }

  final public Stat LastStat() throws ParseException {
        List<Exp> el=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BREAK:
      jj_consume_token(BREAK);
                  {if (true) return Stat.breakstat();}
      break;
    case RETURN:
      jj_consume_token(RETURN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LONGSTRING0:
      case LONGSTRING1:
      case LONGSTRING2:
      case LONGSTRING3:
      case LONGSTRINGN:
      case FALSE:
      case FUNCTION:
      case NIL:
      case NOT:
      case TRUE:
      case NAME:
      case NUMBER:
      case STRING:
      case CHARSTRING:
      case 69:
      case 73:
      case 74:
      case 77:
      case 89:
        el = ExpList();
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
                                     {if (true) return Stat.returnstat(el);}
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Stat ExprStat() throws ParseException {
        Exp.PrimaryExp pe;
        Stat as=null;
    pe = PrimaryExp();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 65:
    case 66:
      as = Assign(assertvarexp(pe));
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
          {if (true) return as==null? Stat.functioncall(assertfunccall(pe)): as;}
    throw new Error("Missing return statement in function");
  }

  final public Stat Assign(Exp.VarExp v0) throws ParseException {
        List<Exp.VarExp> vl = new ArrayList<Exp.VarExp>();
        vl.add(v0);
        Exp.VarExp ve;
        List<Exp> el;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 66:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_3;
      }
      jj_consume_token(66);
      ve = VarExp();
                            vl.add(ve);
    }
    jj_consume_token(65);
    el = ExpList();
                                                                {if (true) return Stat.assignment(vl,el);}
    throw new Error("Missing return statement in function");
  }

  final public Exp.VarExp VarExp() throws ParseException {
        Exp.PrimaryExp pe;
    pe = PrimaryExp();
                          {if (true) return assertvarexp(pe);}
    throw new Error("Missing return statement in function");
  }

  final public FuncName FuncName() throws ParseException {
        FuncName fn;
        Token n;
    n = jj_consume_token(NAME);
                  fn=new FuncName(n.image);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 67:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_4;
      }
      jj_consume_token(67);
      n = jj_consume_token(NAME);
                                fn.adddot(n.image);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 68:
      jj_consume_token(68);
      n = jj_consume_token(NAME);
                                fn.method=n.image;
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
                         {if (true) return fn;}
    throw new Error("Missing return statement in function");
  }

  final public Exp.PrimaryExp PrefixExp() throws ParseException {
        Token n;
        Exp e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAME:
      n = jj_consume_token(NAME);
                                          {if (true) return Exp.nameprefix(n.image);}
      break;
    case 69:
      jj_consume_token(69);
      e = Exp();
      jj_consume_token(70);
                                  {if (true) return Exp.parensprefix(e);}
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp.PrimaryExp PrimaryExp() throws ParseException {
        Exp.PrimaryExp pe;
    pe = PrefixExp();
    label_5:
    while (true) {
      if (jj_2_3(2)) {
        ;
      } else {
        break label_5;
      }
      pe = PostfixOp(pe);
    }
                                                            {if (true) return pe;}
    throw new Error("Missing return statement in function");
  }

  final public Exp.PrimaryExp PostfixOp(Exp.PrimaryExp lhs) throws ParseException {
        Token n;
        Exp e;
        FuncArgs a;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 67:
      jj_consume_token(67);
      n = jj_consume_token(NAME);
                                                  {if (true) return Exp.fieldop(lhs, n.image);}
      break;
    case 71:
      jj_consume_token(71);
      e = Exp();
      jj_consume_token(72);
                                                  {if (true) return Exp.indexop(lhs, e);}
      break;
    case 68:
      jj_consume_token(68);
      n = jj_consume_token(NAME);
      a = FuncArgs();
                                          {if (true) return Exp.methodop(lhs, n.image,a);}
      break;
    case LONGSTRING0:
    case LONGSTRING1:
    case LONGSTRING2:
    case LONGSTRING3:
    case LONGSTRINGN:
    case STRING:
    case CHARSTRING:
    case 69:
    case 74:
      a = FuncArgs();
                                                  {if (true) return Exp.functionop(lhs, a);}
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FuncArgs FuncArgs() throws ParseException {
        List<Exp> el=null;
        TableConstructor tc;
        LuaString s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 69:
      jj_consume_token(69);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LONGSTRING0:
      case LONGSTRING1:
      case LONGSTRING2:
      case LONGSTRING3:
      case LONGSTRINGN:
      case FALSE:
      case FUNCTION:
      case NIL:
      case NOT:
      case TRUE:
      case NAME:
      case NUMBER:
      case STRING:
      case CHARSTRING:
      case 69:
      case 73:
      case 74:
      case 77:
      case 89:
        el = ExpList();
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      jj_consume_token(70);
                                          {if (true) return FuncArgs.explist(el);}
      break;
    case 74:
      tc = TableConstructor();
                                          {if (true) return FuncArgs.tableconstructor(tc);}
      break;
    case LONGSTRING0:
    case LONGSTRING1:
    case LONGSTRING2:
    case LONGSTRING3:
    case LONGSTRINGN:
    case STRING:
    case CHARSTRING:
      s = Str();
                                                          {if (true) return FuncArgs.string(s);}
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public List<Name> NameList() throws ParseException {
        List<Name> nl = new ArrayList<Name>();
        Token name;
    name = jj_consume_token(NAME);
                     nl.add(new Name(name.image));
    label_6:
    while (true) {
      if (jj_2_4(2)) {
        ;
      } else {
        break label_6;
      }
      jj_consume_token(66);
      name = jj_consume_token(NAME);
                                                                                    nl.add(new Name(name.image));
    }
                                                                                                                       {if (true) return nl;}
    throw new Error("Missing return statement in function");
  }

  final public List<Exp> ExpList() throws ParseException {
        List<Exp> el = new ArrayList<Exp>();
        Exp e;
    e = Exp();
                 el.add(e);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 66:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_7;
      }
      jj_consume_token(66);
      e = Exp();
                                            el.add(e);
    }
                                                            {if (true) return el;}
    throw new Error("Missing return statement in function");
  }

  final public Exp SimpleExp() throws ParseException {
        Token n;
        LuaString s;
        Exp e;
        TableConstructor tc;
        FuncBody fb;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NIL:
      jj_consume_token(NIL);
                                                  {if (true) return Exp.constant(LuaValue.NIL);}
      break;
    case TRUE:
      jj_consume_token(TRUE);
                                                  {if (true) return Exp.constant(LuaValue.TRUE);}
      break;
    case FALSE:
      jj_consume_token(FALSE);
                                                  {if (true) return Exp.constant(LuaValue.FALSE);}
      break;
    case NUMBER:
      n = jj_consume_token(NUMBER);
                                                  {if (true) return Exp.numberconstant(n.image);}
      break;
    case LONGSTRING0:
    case LONGSTRING1:
    case LONGSTRING2:
    case LONGSTRING3:
    case LONGSTRINGN:
    case STRING:
    case CHARSTRING:
      s = Str();
                                                  {if (true) return Exp.constant(s);}
      break;
    case 73:
      jj_consume_token(73);
                                                  {if (true) return Exp.varargs();}
      break;
    case 74:
      tc = TableConstructor();
                                  {if (true) return Exp.tableconstructor(tc);}
      break;
    case FUNCTION:
      fb = Function();
                                          {if (true) return Exp.anonymousfunction(fb);}
      break;
    case NAME:
    case 69:
      e = PrimaryExp();
                                          {if (true) return e;}
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public LuaString Str() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      jj_consume_token(STRING);
                                  {if (true) return Str.quoteString(token.image);}
      break;
    case CHARSTRING:
      jj_consume_token(CHARSTRING);
                          {if (true) return Str.charString(token.image);}
      break;
    case LONGSTRING0:
      jj_consume_token(LONGSTRING0);
                          {if (true) return Str.longString(token.image);}
      break;
    case LONGSTRING1:
      jj_consume_token(LONGSTRING1);
                          {if (true) return Str.longString(token.image);}
      break;
    case LONGSTRING2:
      jj_consume_token(LONGSTRING2);
                          {if (true) return Str.longString(token.image);}
      break;
    case LONGSTRING3:
      jj_consume_token(LONGSTRING3);
                          {if (true) return Str.longString(token.image);}
      break;
    case LONGSTRINGN:
      jj_consume_token(LONGSTRINGN);
                          {if (true) return Str.longString(token.image);}
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp Exp() throws ParseException {
        Exp e,s;
        int op;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LONGSTRING0:
    case LONGSTRING1:
    case LONGSTRING2:
    case LONGSTRING3:
    case LONGSTRINGN:
    case FALSE:
    case FUNCTION:
    case NIL:
    case TRUE:
    case NAME:
    case NUMBER:
    case STRING:
    case CHARSTRING:
    case 69:
    case 73:
    case 74:
      e = SimpleExp();
      break;
    case NOT:
    case 77:
    case 89:
      op = Unop();
      s = Exp();
                                             e=Exp.unaryexp(op,s);
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_8:
    while (true) {
      if (jj_2_5(2)) {
        ;
      } else {
        break label_8;
      }
      op = Binop();
      s = Exp();
                                                  e=Exp.binaryexp(e,op,s);
    }
                                                                                 {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public FuncBody Function() throws ParseException {
        FuncBody fb;
    jj_consume_token(FUNCTION);
    fb = FuncBody();
                                   {if (true) return fb;}
    throw new Error("Missing return statement in function");
  }

  final public FuncBody FuncBody() throws ParseException {
        ParList pl=null;
        Block b;
    jj_consume_token(69);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAME:
    case 73:
      pl = ParList();
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    jj_consume_token(70);
    b = Block();
    jj_consume_token(END);
                                                    {if (true) return new FuncBody(pl,b);}
    throw new Error("Missing return statement in function");
  }

  final public ParList ParList() throws ParseException {
        List<Name> nl=null;
        boolean v=false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAME:
      nl = NameList();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 66:
        jj_consume_token(66);
        jj_consume_token(73);
                                    v=true;
        break;
      default:
        jj_la1[26] = jj_gen;
        ;
      }
                                                   {if (true) return new ParList(nl,v);}
      break;
    case 73:
      jj_consume_token(73);
                 {if (true) return new ParList(null,true);} ;
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public TableConstructor TableConstructor() throws ParseException {
        TableConstructor tc = new TableConstructor();
        List<TableField> fl = null;
    jj_consume_token(74);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LONGSTRING0:
    case LONGSTRING1:
    case LONGSTRING2:
    case LONGSTRING3:
    case LONGSTRINGN:
    case FALSE:
    case FUNCTION:
    case NIL:
    case NOT:
    case TRUE:
    case NAME:
    case NUMBER:
    case STRING:
    case CHARSTRING:
    case 69:
    case 71:
    case 73:
    case 74:
    case 77:
    case 89:
      fl = FieldList();
                              tc.fields=fl;
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    jj_consume_token(75);
                                                      {if (true) return tc;}
    throw new Error("Missing return statement in function");
  }

  final public List<TableField> FieldList() throws ParseException {
        List<TableField> fl = new ArrayList<TableField>();
        TableField f;
    f = Field();
                   fl.add(f);
    label_9:
    while (true) {
      if (jj_2_6(2)) {
        ;
      } else {
        break label_9;
      }
      FieldSep();
      f = Field();
                                                                   fl.add(f);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 64:
    case 66:
      FieldSep();
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
                                                                                                 {if (true) return fl;}
    throw new Error("Missing return statement in function");
  }

  final public TableField Field() throws ParseException {
        Token name;
        Exp exp,rhs;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 71:
      jj_consume_token(71);
      exp = Exp();
      jj_consume_token(72);
      jj_consume_token(65);
      rhs = Exp();
                                                  {if (true) return TableField.keyedField(exp,rhs);}
      break;
    default:
      jj_la1[30] = jj_gen;
      if (jj_2_7(2)) {
        name = jj_consume_token(NAME);
        jj_consume_token(65);
        rhs = Exp();
                                                  {if (true) return TableField.namedField(name.image,rhs);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LONGSTRING0:
        case LONGSTRING1:
        case LONGSTRING2:
        case LONGSTRING3:
        case LONGSTRINGN:
        case FALSE:
        case FUNCTION:
        case NIL:
        case NOT:
        case TRUE:
        case NAME:
        case NUMBER:
        case STRING:
        case CHARSTRING:
        case 69:
        case 73:
        case 74:
        case 77:
        case 89:
          rhs = Exp();
                                                  {if (true) return TableField.listField(rhs);}
          break;
        default:
          jj_la1[31] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void FieldSep() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 66:
      jj_consume_token(66);
      break;
    case 64:
      jj_consume_token(64);
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public int Binop() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 76:
      jj_consume_token(76);
                {if (true) return Lua.OP_ADD;}
      break;
    case 77:
      jj_consume_token(77);
                {if (true) return Lua.OP_SUB;}
      break;
    case 78:
      jj_consume_token(78);
                {if (true) return Lua.OP_MUL;}
      break;
    case 79:
      jj_consume_token(79);
                {if (true) return Lua.OP_DIV;}
      break;
    case 80:
      jj_consume_token(80);
                {if (true) return Lua.OP_POW;}
      break;
    case 81:
      jj_consume_token(81);
                {if (true) return Lua.OP_MOD;}
      break;
    case 82:
      jj_consume_token(82);
                {if (true) return Lua.OP_CONCAT;}
      break;
    case 83:
      jj_consume_token(83);
                {if (true) return Lua.OP_LT;}
      break;
    case 84:
      jj_consume_token(84);
                {if (true) return Lua.OP_LE;}
      break;
    case 85:
      jj_consume_token(85);
                {if (true) return Lua.OP_GT;}
      break;
    case 86:
      jj_consume_token(86);
                {if (true) return Lua.OP_GE;}
      break;
    case 87:
      jj_consume_token(87);
                {if (true) return Lua.OP_EQ;}
      break;
    case 88:
      jj_consume_token(88);
                {if (true) return Lua.OP_NEQ;}
      break;
    case AND:
      jj_consume_token(AND);
                {if (true) return Lua.OP_AND;}
      break;
    case OR:
      jj_consume_token(OR);
                {if (true) return Lua.OP_OR;}
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public int Unop() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 77:
      jj_consume_token(77);
                {if (true) return Lua.OP_UNM;}
      break;
    case NOT:
      jj_consume_token(NOT);
                {if (true) return Lua.OP_NOT;}
      break;
    case 89:
      jj_consume_token(89);
                {if (true) return Lua.OP_LEN;}
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(77)) return true;
    return false;
  }

  private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(LONGSTRINGN)) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(LONGSTRING3)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(LONGSTRING2)) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(LONGSTRING1)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(LONGSTRING0)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(CHARSTRING)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(88)) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_58() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(87)) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(86)) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(85)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(84)) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(83)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(82)) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(81)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(80)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(79)) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(73)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(78)) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_13()) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(77)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(NIL)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) return true;
    }
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(65)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(71)) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(74)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) jj_scanpos = xsp;
    if (jj_scan_token(75)) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(69)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) jj_scanpos = xsp;
    if (jj_scan_token(70)) return true;
    return false;
  }

  private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(68)) return true;
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(71)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(67)) return true;
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(LOCAL)) return true;
    if (jj_scan_token(FUNCTION)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(65)) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_11()) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(FUNCTION)) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(69)) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3R_70() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    }
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(89)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(66)) return true;
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public LuaParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[35];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80000000,0x0,0x0,0x40000000,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0xf800000,0x40000000,0x0,0x0,0x0,0x0,0x0,0xf800000,0xf800000,0xf800000,0x0,0xf800000,0xf800000,0xf800000,0x0,0x0,0x0,0xf800000,0x0,0x0,0xf800000,0x0,0x20000000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x62170,0x0,0x0,0x1000,0x0,0x0,0x22040,0x30,0x40100,0x2,0x1,0x60c8628,0x1000,0x0,0x0,0x0,0x0,0x40000,0x6000000,0x60c8628,0x6000000,0x0,0x60c8228,0x6000000,0x60c8628,0x40000,0x0,0x40000,0x60c8628,0x0,0x0,0x60c8628,0x0,0x800,0x400,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x20,0x1,0x1,0x0,0x4,0x2,0x0,0x0,0x20,0x0,0x0,0x2002620,0x0,0x6,0x4,0x8,0x10,0x20,0x4b8,0x2002620,0x420,0x4,0x620,0x0,0x2002620,0x200,0x4,0x200,0x20026a0,0x5,0x80,0x2002620,0x5,0x1fff000,0x2002000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[7];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public LuaParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public LuaParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e.getMessage()); }
    token_source = new LuaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e.getMessage()); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public LuaParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LuaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public LuaParser(LuaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(LuaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[90];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 35; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 90; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 7; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
